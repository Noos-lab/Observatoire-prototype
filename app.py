import streamlit as st
import pandas as pd
import plotly.express as px
import os
import json
import requests

# ---- Configuration ----
st.set_page_config(page_title="Observatoire Global", layout="wide")
st.title("üåê Observatoire Global des Donn√©es Publiques")

# ---- API Statistique Canada ----
@st.cache_data(show_spinner=False)
def get_all_statcan_cubes():
    url = "https://www150.statcan.gc.ca/t1/wds/rest/getAllCubesList"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        result = response.json()
        if "object" in result:
            return result["object"]
        else:
            st.error("R√©ponse inattendue de Statistique Canada.")
            return []
    except Exception as e:
        st.error(f"Erreur lors de la connexion √† Statistique Canada : {e}")
        return []

@st.cache_data(show_spinner=False)
def get_cube_metadata(product_id):
    url = f"https://www150.statcan.gc.ca/t1/wds/rest/getCubeMetadata/{product_id}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json().get("object", {})
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration du metadata : {e}")
        return {}

@st.cache_data(show_spinner=False)
def get_vector_data(vector_id):
    url = f"https://www150.statcan.gc.ca/t1/wds/rest/getDataFromVector/{vector_id}"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return pd.DataFrame(response.json().get("object", []))
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es : {e}")
        return pd.DataFrame()

# ---- Recherche interactive dans Statistique Canada ----
with st.sidebar:
    st.header("üîç Recherche Statistique Canada")
    search_term = st.text_input("Mot-cl√© (ex: GDP, employment, Qu√©bec)", "Qu√©bec")
    if search_term:
        cubes = get_all_statcan_cubes()
        filtered = [cube for cube in cubes if search_term.lower() in cube['cubeTitleEn'].lower()]
        selected_cube = st.selectbox("R√©sultats disponibles", [f"{c['productId']} ‚Äì {c['cubeTitleEn']}" for c in filtered])

        if selected_cube:
            product_id = selected_cube.split(" ‚Äì ")[0]
            metadata = get_cube_metadata(product_id)
            vector_ids = metadata.get("vectorIds", [])[:3]  # 3 vecteurs max pour d√©but

            for vector_id in vector_ids:
                df = get_vector_data(vector_id)
                if not df.empty:
                    st.markdown(f"### üìä Donn√©es du vecteur {vector_id}")
                    st.dataframe(df.head())

# ---- Chargement des donn√©es simul√©es ----
def load_data(source, country):
    filepath = f"data/{source}/{country}.json"
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            return pd.read_json(f)
    return pd.DataFrame()

# ---- S√©lection pays/institution ----
pays_options = [
    "Canada", "Qu√©bec", "France", "√âtats-Unis", "Chine", "Inde",
    "ONU", "OMS", "UNESCO"
]
source_options = ["Banque mondiale", "OMS", "UNESCO"]

selected_country = st.selectbox("üåç Choisissez un pays ou une organisation", pays_options)
selected_source = st.selectbox("üìö Source de donn√©es", source_options)

# ---- Affichage des donn√©es ----
data = load_data(selected_source, selected_country)

if not data.empty:
    st.subheader(f"Donn√©es pour {selected_country} ‚Äì Source : {selected_source}")

    # Filtres
    available_years = data['ann√©e'].dropna().unique()
    selected_year = st.slider("üìÖ Filtrer par ann√©e", int(min(available_years)), int(max(available_years)), int(max(available_years)))
    filtered_data = data[data['ann√©e'] == selected_year]

    # Affichage tableau + graphique
    st.dataframe(filtered_data)

    fig = px.bar(filtered_data, x="indicateur", y="valeur", color="indicateur", title=f"Indicateurs en {selected_year}")
    st.plotly_chart(fig, use_container_width=True)
else:
    st.warning("Aucune donn√©e disponible pour cette combinaison pays/source.")

# üß™ Test dynamique avec vecteurs du Qu√©bec

st.markdown("## üß™ Test dynamique ‚Äì Donn√©es Statistique Canada (Qu√©bec)")

# Liste des vecteurs de test
vectors = {
    "PIB ‚Äì Produit int√©rieur brut (Qu√©bec)": "v108785809",
    "Taux de ch√¥mage (Qu√©bec)": "v111900628",
    "Taux d‚Äôemploi (Qu√©bec)": "v111900627",
    "Esp√©rance de vie (Qu√©bec)": "v68608521",
    "Naissances vivantes (Qu√©bec)": "v5091434",
    "Dipl√¥m√©s postsecondaires (Qu√©bec)": "v62815126"
}

selected_label = st.selectbox("Choisissez un indicateur test √† afficher :", list(vectors.keys()))

if selected_label:
    vector_test_id = vectors[selected_label]
    try:
        df_test = get_vector_data(vector_test_id)
        if not df_test.empty:
            # Affichage dynamique des premi√®res colonnes
            st.markdown(f"### R√©sultats pour : {selected_label}")
            st.dataframe(df_test.head(10))
        else:
            st.error("Aucune donn√©e retourn√©e pour ce vecteur.")
    except Exception as e:
        st.error(f"Erreur lors de la r√©cup√©ration des donn√©es : {e}")


# ---- Note pied de page ----
st.markdown("""
---
Prototype Streamlit ‚Äì Donn√©es simul√©es + API StatCan | Version 0.2
""")
